import React from 'react';
import { BaseTheme, RestyleFunctionContainer } from './types';
import { BackgroundColorProps, OpacityProps, LayoutProps, SpacingProps, BorderProps, ShadowProps, PositionProps, VisibleProps, SpacingShorthandProps, BackgroundColorShorthandProps } from './restyleFunctions';
declare type BaseBoxProps<Theme extends BaseTheme> = BackgroundColorProps<Theme> & OpacityProps<Theme> & VisibleProps<Theme> & LayoutProps<Theme> & SpacingProps<Theme> & BorderProps<Theme> & ShadowProps<Theme> & PositionProps<Theme>;
export declare type BoxProps<Theme extends BaseTheme, EnableShorthand extends boolean = true> = BaseBoxProps<Theme> & EnableShorthand extends true ? BaseBoxProps<Theme> & SpacingShorthandProps<Theme> & BackgroundColorShorthandProps<Theme> : BaseBoxProps<Theme>;
export declare const boxRestyleFunctions: (RestyleFunctionContainer<Record<string, any>, BaseTheme, "backgroundColor", "colors"> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "bg", "colors"> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "opacity", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "visible", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "margin" | "marginBottom" | "marginHorizontal" | "marginLeft" | "marginRight" | "marginTop" | "marginVertical" | "padding" | "paddingBottom" | "paddingHorizontal" | "paddingLeft" | "paddingRight" | "paddingTop" | "paddingVertical", "spacing">[] | RestyleFunctionContainer<Record<string, any>, BaseTheme, "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "my" | "p" | "pt" | "pr" | "pb" | "pl" | "px" | "py", "spacing">[] | RestyleFunctionContainer<Record<string, any>, BaseTheme, "width" | "minWidth" | "alignContent" | "alignItems" | "alignSelf" | "aspectRatio" | "flex" | "flexBasis" | "flexDirection" | "flexGrow" | "flexShrink" | "flexWrap" | "height" | "justifyContent" | "maxHeight" | "maxWidth" | "minHeight" | "overflow", undefined>[] | (RestyleFunctionContainer<Record<string, any>, BaseTheme, "bottom" | "left" | "position" | "right" | "top", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "zIndex", "zIndices">)[] | (RestyleFunctionContainer<Record<string, any>, BaseTheme, "borderBottomWidth" | "borderLeftWidth" | "borderRightWidth" | "borderStyle" | "borderTopWidth" | "borderWidth", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "borderBottomColor" | "borderColor" | "borderLeftColor" | "borderRightColor" | "borderTopColor", "colors"> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderRadius" | "borderTopLeftRadius" | "borderTopRightRadius", "borderRadii">)[] | (RestyleFunctionContainer<Record<string, any>, BaseTheme, "elevation" | "shadowOffset" | "shadowOpacity" | "shadowRadius", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "shadowColor", "colors">)[])[];
declare const createBox: <Theme extends BaseTheme, Props = import("react-native").ViewProps & {
    children?: React.ReactNode;
}, EnableShorthand extends boolean = true>(BaseComponent?: React.ComponentType<any>) => ((props: BoxProps<Theme, EnableShorthand> & Pick<Props, Exclude<keyof Props, keyof BoxProps<Theme, EnableShorthand>>>) => JSX.Element) & {
    defaultProps?: Partial<BoxProps<Theme, EnableShorthand> & Pick<Props, Exclude<keyof Props, keyof BoxProps<Theme, EnableShorthand>>>> | undefined;
};
export default createBox;
