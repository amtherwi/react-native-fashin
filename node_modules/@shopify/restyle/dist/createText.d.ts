import React from 'react';
import { BaseTheme, RestyleFunctionContainer } from './types';
import { ColorProps, OpacityProps, SpacingProps, TextShadowProps, TypographyProps, VisibleProps, SpacingShorthandProps } from './restyleFunctions';
import { VariantProps } from './createVariant';
declare type BaseTextProps<Theme extends BaseTheme> = ColorProps<Theme> & OpacityProps<Theme> & VisibleProps<Theme> & TypographyProps<Theme> & SpacingProps<Theme> & TextShadowProps<Theme> & VariantProps<Theme, 'textVariants'>;
export declare type TextProps<Theme extends BaseTheme, EnableShorthand extends boolean = true> = EnableShorthand extends true ? BaseTextProps<Theme> & SpacingShorthandProps<Theme> : BaseTextProps<Theme>;
export declare const textRestyleFunctions: (RestyleFunctionContainer<Record<string, any>, BaseTheme, "color", "colors"> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "opacity", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "visible", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "margin" | "marginBottom" | "marginHorizontal" | "marginLeft" | "marginRight" | "marginTop" | "marginVertical" | "padding" | "paddingBottom" | "paddingHorizontal" | "paddingLeft" | "paddingRight" | "paddingTop" | "paddingVertical", "spacing">[] | RestyleFunctionContainer<Record<string, any>, BaseTheme, "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "my" | "p" | "pt" | "pr" | "pb" | "pl" | "px" | "py", "spacing">[] | RestyleFunctionContainer<Record<string, any>, BaseTheme, "fontFamily" | "fontSize" | "fontStyle" | "fontWeight" | "letterSpacing" | "lineHeight" | "textAlign" | "textDecorationLine" | "textDecorationStyle" | "textTransform", undefined>[] | (RestyleFunctionContainer<Record<string, any>, BaseTheme, "textShadowOffset" | "textShadowRadius", undefined> | RestyleFunctionContainer<Record<string, any>, BaseTheme, "textShadowColor", "colors">)[] | RestyleFunctionContainer<VariantProps<BaseTheme, "textVariants", "variant">, BaseTheme, "variant", "textVariants">)[];
declare const createText: <Theme extends BaseTheme, Props = import("react-native").TextProps & {
    children?: React.ReactNode;
}, EnableShorthand extends boolean = true>(BaseComponent?: React.ComponentType<any>) => ((props: TextProps<Theme, EnableShorthand> & Pick<Props, Exclude<keyof Props, keyof TextProps<Theme, EnableShorthand>>>) => JSX.Element) & {
    defaultProps?: Partial<TextProps<Theme, EnableShorthand> & Pick<Props, Exclude<keyof Props, keyof TextProps<Theme, EnableShorthand>>>> | undefined;
};
export default createText;
